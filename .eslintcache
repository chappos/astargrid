[{"C:\\Users\\Chappos\\Desktop\\Hackermans\\react\\astargrid\\src\\index.js":"1","C:\\Users\\Chappos\\Desktop\\Hackermans\\react\\astargrid\\src\\App.js":"2","C:\\Users\\Chappos\\Desktop\\Hackermans\\react\\astargrid\\src\\components\\Grid.js":"3","C:\\Users\\Chappos\\Desktop\\Hackermans\\react\\astargrid\\src\\components\\Cell.js":"4","C:\\Users\\Chappos\\Desktop\\Hackermans\\react\\astargrid\\src\\components\\Option.js":"5","C:\\Users\\Chappos\\Desktop\\Hackermans\\react\\astargrid\\src\\components\\OptionBar.js":"6"},{"size":221,"mtime":1611022189525,"results":"7","hashOfConfig":"8"},{"size":5778,"mtime":1611209328129,"results":"9","hashOfConfig":"8"},{"size":930,"mtime":1611209238290,"results":"10","hashOfConfig":"8"},{"size":310,"mtime":1611209385128,"results":"11","hashOfConfig":"8"},{"size":276,"mtime":1611199236607,"results":"12","hashOfConfig":"8"},{"size":780,"mtime":1611199236608,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"51fq3c",{"filePath":"17","messages":"18","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"C:\\Users\\Chappos\\Desktop\\Hackermans\\react\\astargrid\\src\\index.js",[],["30","31"],"C:\\Users\\Chappos\\Desktop\\Hackermans\\react\\astargrid\\src\\App.js",["32","33","34"],"import React, { useState, useEffect } from 'react'\r\nimport './App.css';\r\nimport Grid from './components/Grid.js'\r\nimport OptionBar from './components/OptionBar.js'\r\n\r\nfunction App() {\r\n  const gridSize = 10\r\n  const placements = {\r\n    START: 'START',\r\n    END: 'END',\r\n    CLEAR: 'CLEAR',\r\n    BLOCKED: 'BLOCKED',\r\n    SHORTEST: 'SHORTEST'\r\n  }\r\n\r\n  //Set up useStates\r\n  const [gridData, setGridData] = useState(generateGridData())\r\n  const [lastClickedCell, setClickedCell] = useState()\r\n  const [currentPlacement, setCurrentPlacement] = useState()\r\n  const [startCell, setStart] = useState()\r\n  const [endCell, setEnd] = useState()\r\n  const [cellMap, setCellMap] = useState(new Map())\r\n  const [result, setResult] = useState(new Map())\r\n\r\n  useEffect(()=>{\r\n    if(!lastClickedCell){\r\n      return\r\n    }\r\n    var x_int = parseInt(lastClickedCell.charAt(0))\r\n    var y_int = parseInt(lastClickedCell.charAt(1))\r\n    var newMap = cellMap\r\n\r\n    //If we are placing a new start or end, clear the previous one\r\n    if(currentPlacement === placements.START || currentPlacement === placements.END){\r\n      for(let [key, value] of newMap){\r\n        if(value.state === currentPlacement){\r\n          value.state = placements.CLEAR\r\n        }\r\n      }\r\n    } \r\n\r\n    // We don't want to store CLEAR placements, just remove current entries.\r\n    // A blank entry will have a state of CLEAR when initialized in the grid.\r\n    if(newMap.has(lastClickedCell)){\r\n      newMap.delete(lastClickedCell)\r\n    } \r\n\r\n    if(currentPlacement !== placements.CLEAR){ \r\n      newMap.set(lastClickedCell, {x: x_int, y: y_int, state: currentPlacement})\r\n    }\r\n    setCellMap(newMap)\r\n    updateGrid()\r\n  }, [lastClickedCell])\r\n\r\n  useEffect(()=>{\r\n    if(!gridData){\r\n      return\r\n    }\r\n    if(startCell && endCell){\r\n      var new_result = astarSearch()\r\n      if(new_result !== result){\r\n        for(let i = 0; i < new_result.length; i++){\r\n          if(new_result[i].state === placements.CLEAR){\r\n            new_result[i].state = placements.SHORTEST\r\n          }\r\n        }\r\n        setResult(new_result)\r\n      }\r\n    }\r\n  }, [gridData])\r\n\r\n  function updateGrid(){\r\n    var newGrid = generateGridData()\r\n    var start = null \r\n    var end = null\r\n    for(let [key, value] of cellMap){\r\n      if(value.state === placements.START){\r\n        start = key\r\n      } else if(value.state === placements.END){\r\n        end = key\r\n      }\r\n      newGrid[value.x][value.y].state = value.state\r\n    }\r\n\r\n    setStart(start)\r\n    setEnd(end)\r\n    setGridData(newGrid)\r\n  }\r\n\r\n  //Generates a \"blank\" grid dataset\r\n  function generateGridData(){\r\n    var output = []\r\n    for(var i = 0; i < gridSize; i++){\r\n      var row = []\r\n      output.push(row)\r\n      for(var j = 0; j < gridSize; j++){\r\n        output[i].push({\r\n          'x': i,\r\n          'y': j,\r\n          'f': null,\r\n          'g': null,\r\n          'h': null,\r\n          'parent': null,\r\n          'state' : placements.CLEAR\r\n        })\r\n      }\r\n    }\r\n    return output\r\n  }\r\n\r\n  //A* SEARCH LOGIC\r\n\r\n  function astarSearch(){\r\n    var start = gridData[startCell.charAt(0)][startCell.charAt(1)]\r\n    var end = gridData[endCell.charAt(0)][endCell.charAt(1)]\r\n\r\n    var open = []\r\n    var closed = []\r\n    open.push(gridData[start.x][start.y])\r\n    while(open.length > 0){\r\n        var lowestIndex = 0\r\n        for(var i=0; i< open.length; i++){\r\n            if(open[i].f < open[lowestIndex].f){\r\n                lowestIndex = i\r\n            }\r\n        }\r\n        var current = open[lowestIndex]\r\n\r\n        //Found end\r\n        if(current.x === end.x && current.y === end.y){\r\n            var curr = current\r\n            var ret = []\r\n            while(curr.parent){\r\n                ret.push(curr)\r\n                curr = curr.parent\r\n            }\r\n            return ret.reverse()\r\n        }\r\n\r\n        //Normal case - close current and process neighbours\r\n        open.splice(open.indexOf(current), 1)\r\n        closed.push(current)\r\n        var neighbours = getNeighbours(current)\r\n        for(var ii=0; ii < neighbours.length; ii++){\r\n            var neighbour = neighbours[ii]\r\n            if(closed.includes(neighbour) || neighbour.state === \"BLOCKED\"){\r\n                continue\r\n            } else {\r\n                var gScore = current.g + 1\r\n                var gScoreIsBest = false\r\n\r\n                if(!open.includes(neighbour)){\r\n                    gScoreIsBest = true\r\n                    neighbour.h = astarH([neighbour.x, neighbour.y], end)\r\n                    open.push(neighbour)\r\n                }\r\n                else if(gScore < neighbour.g){\r\n                    gScoreIsBest = true;\r\n                }\r\n\r\n                if(gScoreIsBest){\r\n                    neighbour.parent = current\r\n                    neighbour.g = gScore\r\n                    neighbour.f = neighbour.g + neighbour.h \r\n                }\r\n            }\r\n        } \r\n    }\r\n    return [];\r\n}\r\n\r\nfunction astarH(current, goal){\r\n    return (Math.abs(current.x - goal.x) + Math.abs(current.y - goal.y))\r\n}\r\nfunction getNeighbours(current){\r\n    var output = []\r\n    var x = current.x\r\n    var y = current.y\r\n\r\n    if(gridData[x-1] && gridData[x-1][y]){\r\n        output.push(gridData[x-1][y])\r\n    }\r\n    if(gridData[x+1] && gridData[x+1][y]){\r\n        output.push(gridData[x+1][y])\r\n    }\r\n    if(gridData[x][y-1]){\r\n        output.push(gridData[x][y-1])\r\n    }\r\n    if(gridData[x][y+1]){\r\n        output.push(gridData[x][y+1])\r\n    }\r\n    return output\r\n}\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <OptionBar\r\n        placements={placements}\r\n        setCurrentPlacement={setCurrentPlacement}\r\n      />\r\n      <Grid\r\n        gridData={gridData}\r\n        setClicked={setClickedCell}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Chappos\\Desktop\\Hackermans\\react\\astargrid\\src\\components\\Grid.js",[],"C:\\Users\\Chappos\\Desktop\\Hackermans\\react\\astargrid\\src\\components\\Cell.js",["35"],"import React from 'react'\r\n\r\nexport default function Cell({x, y, setClicked, state}) {\r\n    function handleClick(){\r\n        setClicked(x + \"\" + y)\r\n    }\r\n\r\n    return (\r\n        <button\r\n            className={\"Cell\" + ' ' + state}\r\n            onClick={handleClick}\r\n        >\r\n        </button>\r\n    )\r\n}\r\n","C:\\Users\\Chappos\\Desktop\\Hackermans\\react\\astargrid\\src\\components\\Option.js",[],["36","37"],"C:\\Users\\Chappos\\Desktop\\Hackermans\\react\\astargrid\\src\\components\\OptionBar.js",[],{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":35,"column":16,"nodeType":"44","messageId":"45","endLine":35,"endColumn":19},{"ruleId":"46","severity":1,"message":"47","line":53,"column":6,"nodeType":"48","endLine":53,"endColumn":23,"suggestions":"49"},{"ruleId":"46","severity":1,"message":"50","line":70,"column":6,"nodeType":"48","endLine":70,"endColumn":16,"suggestions":"51"},{"ruleId":"52","severity":1,"message":"53","line":10,"column":31,"nodeType":"54","messageId":"55","endLine":10,"endColumn":32},{"ruleId":"38","replacedBy":"56"},{"ruleId":"40","replacedBy":"57"},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],"no-unused-vars","'key' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'cellMap', 'currentPlacement', 'placements.CLEAR', 'placements.END', 'placements.START', and 'updateGrid'. Either include them or remove the dependency array.","ArrayExpression",["60"],"React Hook useEffect has missing dependencies: 'astarSearch', 'endCell', 'placements.CLEAR', 'placements.SHORTEST', 'result', and 'startCell'. Either include them or remove the dependency array.",["61"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat",["58"],["59"],"no-global-assign","no-unsafe-negation",{"desc":"62","fix":"63"},{"desc":"64","fix":"65"},"Update the dependencies array to be: [cellMap, currentPlacement, lastClickedCell, placements.CLEAR, placements.END, placements.START, updateGrid]",{"range":"66","text":"67"},"Update the dependencies array to be: [astarSearch, endCell, gridData, placements.CLEAR, placements.SHORTEST, result, startCell]",{"range":"68","text":"69"},[1686,1703],"[cellMap, currentPlacement, lastClickedCell, placements.CLEAR, placements.END, placements.START, updateGrid]",[2112,2122],"[astarSearch, endCell, gridData, placements.CLEAR, placements.SHORTEST, result, startCell]"]